
def primalPivot():
    indexR = 0
    indexC = 0
    for i in range(0, matrix.parts['c'].shape[1]):
        if(matrix.parts['c'][0, i] < 0):
            indexC = i
            break

    ratio = float('inf')
    for i in range(0, matrix.parts['A'].shape[0]):
        if(matrix.parts['A'][i, indexC] != 0):
            aux = Fraction(matrix.parts['b'][i + 1, 0], matrix.parts['A'][i, indexC])
        else:
            pass
        if(aux < ratio):
            ratio = aux
            indexR = i

    return (matrix.parts['c'].shape[0] + indexR, matrix.parts['mem'].shape[1] + indexC)


def dualPivot():
    indexR = 0
    indexC = 0
    for i in range(1, matrix.parts['b'].shape[0]):
        if(matrix.parts['b'][i, 0] < b):
            indexR = i
            break

    for i in range(0, matrix.parts['A'].shape[1])


def primal():
    (row, col) = primalPivot()
    print(row, col)
    print("primal")


def dual():
    (row, col) = dualPivot()
    print("dual")


def adjustMatrix():
    print("adjust")
